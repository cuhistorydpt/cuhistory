<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>University of Chittagong - History Department Profiles</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts - Inter -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            background: linear-gradient(to bottom right, #e0f2fe, #e0e7ff); /* Light blue to light indigo gradient */
            min-height: 100vh;
        }
        /* Custom scrollbar for thoughts section */
        .thoughts-scrollable {
            max-height: 200px; /* Limit height */
            overflow-y: auto; /* Enable vertical scrolling */
            -ms-overflow-style: none;  /* IE and Edge */
            scrollbar-width: none;  /* Firefox */
        }
        .thoughts-scrollable::-webkit-scrollbar {
            display: none; /* Chrome, Safari, Opera */
        }
    </style>
</head>
<body class="p-4">
    <header class="text-center py-8 bg-white rounded-lg shadow-md mb-8">
        <h1 class="text-4xl font-extrabold text-indigo-800 mb-2">
            University of Chittagong - History Department
        </h1>
        <p class="text-xl text-gray-600">
            Personal Profiles & Thoughts
        </p>
        <div class="mt-4">
            <nav class="flex justify-center space-x-4">
                <button id="allProfilesBtn" class="px-6 py-2 rounded-full text-lg font-medium transition-all duration-300 bg-indigo-600 text-white shadow-lg">
                    All Profiles
                </button>
                <button id="myProfileBtn" class="px-6 py-2 rounded-full text-lg font-medium transition-all duration-300 bg-gray-200 text-gray-700 hover:bg-gray-300">
                    My Profile
                </button>
            </nav>
        </div>
    </header>

    <main class="container mx-auto p-4">
        <div id="loadingMessage" class="flex items-center justify-center p-8 bg-white rounded-lg shadow-md hidden">
            <div class="text-xl text-gray-600">Loading authentication...</div>
        </div>

        <div id="allProfilesSection" class="hidden">
            <h2 class="text-3xl font-bold text-indigo-700 mb-6 text-center">
                All Department Profiles
            </h2>
            <div id="profilesGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Profiles will be dynamically loaded here -->
            </div>
            <p id="noProfilesMessage" class="text-center text-gray-600 col-span-full p-4 bg-white rounded-lg shadow-md hidden">
                No profiles found yet. Be the first to create one!
            </p>
        </div>

        <div id="myProfileSection" class="bg-white rounded-lg shadow-xl p-8 hidden">
            <h2 id="myProfileTitle" class="text-3xl font-bold text-indigo-700 mb-6 text-center">
                My Department Profile
            </h2>
            <p class="text-gray-600 text-center mb-4">
                Your User ID: <span id="currentUserId" class="font-mono text-sm bg-gray-100 px-2 py-1 rounded"></span>
            </p>

            <div id="myProfileDisplay" class="hidden">
                <!-- My profile card will be rendered here -->
                <div class="profile-card bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300 overflow-hidden flex flex-col items-center p-6 border border-gray-200">
                    <div class="w-32 h-32 rounded-full overflow-hidden mb-4 border-4 border-indigo-300 shadow-inner">
                        <img id="myProfilePicture" src="https://placehold.co/400x400/CBD5E1/4A5568?text=No+Image" alt="Profile Picture" class="w-full h-full object-cover">
                    </div>
                    <h3 id="myProfileName" class="text-2xl font-bold text-indigo-700 mb-2 text-center"></h3>
                    <p class="text-gray-600 text-center text-lg mb-1">
                        <span class="font-semibold">Session:</span> <span id="myProfileSession"></span>
                    </p>
                    <p class="text-gray-600 text-center text-lg mb-3">
                        <span class="font-semibold">Roll:</span> <span id="myProfileRoll"></span>
                    </p>
                    <div class="bg-gray-50 rounded-lg p-4 w-full text-gray-800 border border-gray-100 flex-grow thoughts-scrollable">
                        <h4 class="font-semibold text-lg mb-2 text-indigo-600">Thoughts:</h4>
                        <p id="myProfileThoughts" class="text-justify whitespace-pre-wrap"></p>
                    </div>
                </div>
                <div class="flex justify-center space-x-4 mt-6">
                    <button id="editMyProfileBtn" class="px-6 py-3 bg-blue-600 text-white rounded-full shadow-md hover:bg-blue-700 transition-all duration-300 transform hover:scale-105">
                        Edit My Profile
                    </button>
                    <button id="deleteMyProfileBtn" class="px-6 py-3 bg-red-600 text-white rounded-full shadow-md hover:bg-red-700 transition-all duration-300 transform hover:scale-105">
                        Delete My Profile
                    </button>
                </div>
            </div>

            <div id="createProfilePrompt" class="text-center hidden">
                <p class="text-xl text-gray-600 mb-4">You haven't created a profile yet.</p>
                <button id="createProfileBtn" class="px-8 py-4 bg-green-600 text-white rounded-full shadow-lg hover:bg-green-700 transition-all duration-300 transform hover:scale-105 text-xl font-semibold">
                    Create My Profile
                </button>
            </div>

            <div id="profileFormContainer" class="hidden max-w-2xl mx-auto">
                <h3 id="formTitle" class="text-2xl font-bold text-indigo-700 mb-6 text-center">Create Your New Profile</h3>
                <form id="profileForm" class="space-y-6">
                    <div>
                        <label for="name" class="block text-gray-700 text-lg font-medium mb-2">
                            Name: <span class="text-red-500">*</span>
                        </label>
                        <input type="text" id="name" name="name" class="w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-lg" placeholder="Your Full Name" required>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="session" class="block text-gray-700 text-lg font-medium mb-2">
                                Session: <span class="text-red-500">*</span>
                            </label>
                            <input type="text" id="session" name="session" class="w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-lg" placeholder="e.g., 2018-19" required>
                        </div>
                        <div>
                            <label for="roll" class="block text-gray-700 text-lg font-medium mb-2">
                                Roll No.: <span class="text-red-500">*</span>
                            </label>
                            <input type="text" id="roll" name="roll" class="w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-lg" placeholder="e.g., 12345" required>
                        </div>
                    </div>
                    <div>
                        <label for="pictureUrl" class="block text-gray-700 text-lg font-medium mb-2">
                            Picture URL:
                        </label>
                        <input type="url" id="pictureUrl" name="pictureUrl" class="w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-lg" placeholder="Link to your profile picture (e.g., from Imgur, Google Photos)">
                    </div>
                    <div>
                        <label for="thoughts" class="block text-gray-700 text-lg font-medium mb-2">
                            Your Thoughts:
                        </label>
                        <textarea id="thoughts" name="thoughts" rows="6" class="w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-lg resize-y" placeholder="Share your thoughts about anything..."></textarea>
                    </div>
                    <div id="formErrorMessage" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md relative hidden" role="alert">
                        <span id="errorMessageText" class="block sm:inline"></span>
                    </div>
                    <div class="flex justify-end space-x-4 mt-8">
                        <button type="button" id="cancelFormBtn" class="px-6 py-3 bg-gray-300 text-gray-800 rounded-full shadow-md hover:bg-gray-400 transition-all duration-300 transform hover:scale-105 text-lg">
                            Cancel
                        </button>
                        <button type="submit" id="saveProfileBtn" class="px-8 py-3 bg-indigo-600 text-white rounded-full shadow-lg hover:bg-indigo-700 transition-all duration-300 transform hover:scale-105 text-lg font-semibold">
                            Save Profile
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <!-- Custom Confirmation Dialog for Delete -->
    <div id="confirmDeleteDialog" class="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white p-8 rounded-lg shadow-lg max-w-sm w-full text-center">
            <h3 class="text-2xl font-bold text-gray-800 mb-4">Confirm Deletion</h3>
            <p class="text-gray-700 mb-6">Are you sure you want to delete your profile? This action cannot be undone.</p>
            <div class="flex justify-center space-x-4">
                <button id="confirmDeleteYes" class="px-6 py-3 bg-red-600 text-white rounded-full shadow-md hover:bg-red-700 transition-all duration-300">
                    Yes, Delete
                </button>
                <button id="confirmDeleteNo" class="px-6 py-3 bg-gray-300 text-gray-800 rounded-full shadow-md hover:bg-gray-400 transition-all duration-300">
                    Cancel
                </button>
            </div>
        </div>
    </div>

    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, setDoc, onSnapshot, collection, deleteDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global variables provided by the environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        let app;
        let db;
        let auth;
        let currentUserId = null;
        let myProfileData = null; // Store current user's profile data

        // DOM Elements
        const loadingMessage = document.getElementById('loadingMessage');
        const allProfilesBtn = document.getElementById('allProfilesBtn');
        const myProfileBtn = document.getElementById('myProfileBtn');
        const allProfilesSection = document.getElementById('allProfilesSection');
        const profilesGrid = document.getElementById('profilesGrid');
        const noProfilesMessage = document.getElementById('noProfilesMessage');
        const myProfileSection = document.getElementById('myProfileSection');
        const myProfileTitle = document.getElementById('myProfileTitle');
        const currentUserIdSpan = document.getElementById('currentUserId');
        const myProfileDisplay = document.getElementById('myProfileDisplay');
        const myProfilePicture = document.getElementById('myProfilePicture');
        const myProfileName = document.getElementById('myProfileName');
        const myProfileSession = document.getElementById('myProfileSession');
        const myProfileRoll = document.getElementById('myProfileRoll');
        const myProfileThoughts = document.getElementById('myProfileThoughts');
        const editMyProfileBtn = document.getElementById('editMyProfileBtn');
        const deleteMyProfileBtn = document.getElementById('deleteMyProfileBtn');
        const createProfilePrompt = document.getElementById('createProfilePrompt');
        const createProfileBtn = document.getElementById('createProfileBtn');
        const profileFormContainer = document.getElementById('profileFormContainer');
        const formTitle = document.getElementById('formTitle');
        const profileForm = document.getElementById('profileForm');
        const formErrorMessage = document.getElementById('formErrorMessage');
        const errorMessageText = document.getElementById('errorMessageText');
        const cancelFormBtn = document.getElementById('cancelFormBtn');
        const saveProfileBtn = document.getElementById('saveProfileBtn');
        const confirmDeleteDialog = document.getElementById('confirmDeleteDialog');
        const confirmDeleteYes = document.getElementById('confirmDeleteYes');
        const confirmDeleteNo = document.getElementById('confirmDeleteNo');

        // Function to set active button styling
        function setActiveButton(activeBtn) {
            allProfilesBtn.classList.remove('bg-indigo-600', 'text-white', 'shadow-lg');
            allProfilesBtn.classList.add('bg-gray-200', 'text-gray-700', 'hover:bg-gray-300');
            myProfileBtn.classList.remove('bg-indigo-600', 'text-white', 'shadow-lg');
            myProfileBtn.classList.add('bg-gray-200', 'text-gray-700', 'hover:bg-gray-300');

            activeBtn.classList.remove('bg-gray-200', 'text-gray-700', 'hover:bg-gray-300');
            activeBtn.classList.add('bg-indigo-600', 'text-white', 'shadow-lg');
        }

        // Function to show/hide sections
        function showSection(sectionId) {
            allProfilesSection.classList.add('hidden');
            myProfileSection.classList.add('hidden');
            loadingMessage.classList.add('hidden');

            switch (sectionId) {
                case 'allProfiles':
                    allProfilesSection.classList.remove('hidden');
                    break;
                case 'myProfile':
                    myProfileSection.classList.remove('hidden');
                    break;
                case 'loading':
                    loadingMessage.classList.remove('hidden');
                    break;
            }
        }

        // Function to display an error message in the form
        function displayFormError(message) {
            errorMessageText.textContent = message;
            formErrorMessage.classList.remove('hidden');
        }

        // Function to hide the form error message
        function hideFormError() {
            formErrorMessage.classList.add('hidden');
            errorMessageText.textContent = '';
        }

        // Function to render a single profile card
        function renderProfileCard(profile, isEditable = false) {
            const defaultImageUrl = "https://placehold.co/400x400/CBD5E1/4A5568?text=No+Image";
            return `
                <div class="bg-white rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300 overflow-hidden flex flex-col items-center p-6 border border-gray-200">
                    <div class="w-32 h-32 rounded-full overflow-hidden mb-4 border-4 border-indigo-300 shadow-inner">
                        <img src="${profile.pictureUrl || defaultImageUrl}"
                             alt="${profile.name}'s profile"
                             class="w-full h-full object-cover"
                             onerror="this.onerror=null;this.src='${defaultImageUrl}';" />
                    </div>
                    <h3 class="text-2xl font-bold text-indigo-700 mb-2 text-center">${profile.name || 'N/A'}</h3>
                    <p class="text-gray-600 text-center text-lg mb-1">
                        <span class="font-semibold">Session:</span> ${profile.session || 'N/A'}
                    </p>
                    <p class="text-gray-600 text-center text-lg mb-3">
                        <span class="font-semibold">Roll:</span> ${profile.roll || 'N/A'}
                    </p>
                    <div class="bg-gray-50 rounded-lg p-4 w-full text-gray-800 border border-gray-100 flex-grow thoughts-scrollable">
                        <h4 class="font-semibold text-lg mb-2 text-indigo-600">Thoughts:</h4>
                        <p class="text-justify whitespace-pre-wrap">${profile.thoughts || 'No thoughts recorded yet.'}</p>
                    </div>
                </div>
            `;
        }

        // Function to fetch and display all profiles
        function fetchAllProfiles() {
            if (!db) {
                console.error("Firestore not initialized for all profiles.");
                return;
            }
            showSection('allProfiles');
            setActiveButton(allProfilesBtn);
            profilesGrid.innerHTML = '<div class="col-span-full text-center text-gray-600">Loading profiles...</div>';
            noProfilesMessage.classList.add('hidden');

            const publicProfilesCollectionRef = collection(db, `artifacts/${appId}/public/data/profiles`);
            onSnapshot(publicProfilesCollectionRef, (snapshot) => {
                const fetchedProfiles = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                fetchedProfiles.sort((a, b) => (a.name || '').localeCompare(b.name || '')); // Sort by name

                if (fetchedProfiles.length > 0) {
                    profilesGrid.innerHTML = fetchedProfiles.map(profile => renderProfileCard(profile)).join('');
                    noProfilesMessage.classList.add('hidden');
                } else {
                    profilesGrid.innerHTML = '';
                    noProfilesMessage.classList.remove('hidden');
                }
            }, (err) => {
                console.error("Error fetching public profiles:", err);
                profilesGrid.innerHTML = `<div class="col-span-full text-center text-red-700 bg-red-100 p-4 rounded-lg">Failed to load profiles: ${err.message}</div>`;
                noProfilesMessage.classList.add('hidden');
            });
        }

        // Function to display my profile or the form to create/edit
        async function displayMyProfile() {
            showSection('myProfile');
            setActiveButton(myProfileBtn);
            currentUserIdSpan.textContent = currentUserId || 'N/A';
            myProfileDisplay.classList.add('hidden');
            createProfilePrompt.classList.add('hidden');
            profileFormContainer.classList.add('hidden');
            hideFormError(); // Hide any previous form errors

            if (!db || !currentUserId) {
                myProfileSection.innerHTML = '<p class="text-xl text-red-500 text-center">Authentication not ready or user not logged in.</p>';
                return;
            }

            const privateDocRef = doc(db, `artifacts/${appId}/users/${currentUserId}/profiles`, currentUserId);

            // Use onSnapshot for real-time updates of my profile as well
            onSnapshot(privateDocRef, (docSnap) => {
                if (docSnap.exists()) {
                    myProfileData = { id: docSnap.id, ...docSnap.data() };
                    myProfileTitle.textContent = 'My Department Profile';
                    myProfilePicture.src = myProfileData.pictureUrl || "https://placehold.co/400x400/CBD5E1/4A5568?text=No+Image";
                    myProfileName.textContent = myProfileData.name || 'N/A';
                    myProfileSession.textContent = myProfileData.session || 'N/A';
                    myProfileRoll.textContent = myProfileData.roll || 'N/A';
                    myProfileThoughts.textContent = myProfileData.thoughts || 'No thoughts recorded yet.';
                    myProfileDisplay.classList.remove('hidden');
                    createProfilePrompt.classList.add('hidden');
                    profileFormContainer.classList.add('hidden');
                } else {
                    myProfileData = null;
                    myProfileTitle.textContent = 'Create Your Profile';
                    myProfileDisplay.classList.add('hidden');
                    createProfilePrompt.classList.remove('hidden');
                    profileFormContainer.classList.add('hidden');
                }
            }, (err) => {
                console.error("Error fetching my profile:", err);
                myProfileSection.innerHTML = `<p class="text-xl text-red-500 text-center">Failed to load your profile: ${err.message}</p>`;
            });
        }

        // Function to show the profile form for editing or creation
        function showProfileForm() {
            myProfileDisplay.classList.add('hidden');
            createProfilePrompt.classList.add('hidden');
            profileFormContainer.classList.remove('hidden');
            hideFormError();

            if (myProfileData) {
                formTitle.textContent = 'Edit Your Profile';
                document.getElementById('name').value = myProfileData.name || '';
                document.getElementById('session').value = myProfileData.session || '';
                document.getElementById('roll').value = myProfileData.roll || '';
                document.getElementById('pictureUrl').value = myProfileData.pictureUrl || '';
                document.getElementById('thoughts').value = myProfileData.thoughts || '';
            } else {
                formTitle.textContent = 'Create Your New Profile';
                profileForm.reset(); // Clear form fields for new profile
            }
        }

        // Handle saving the profile
        profileForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            saveProfileBtn.disabled = true;
            saveProfileBtn.textContent = 'Saving...';
            hideFormError();

            const formData = {
                name: document.getElementById('name').value.trim(),
                session: document.getElementById('session').value.trim(),
                roll: document.getElementById('roll').value.trim(),
                pictureUrl: document.getElementById('pictureUrl').value.trim(),
                thoughts: document.getElementById('thoughts').value.trim(),
            };

            // Basic validation
            if (!formData.name || !formData.session || !formData.roll) {
                displayFormError("Name, Session, and Roll are required fields.");
                saveProfileBtn.disabled = false;
                saveProfileBtn.textContent = 'Save Profile';
                return;
            }

            try {
                const privateDocRef = doc(db, `artifacts/${appId}/users/${currentUserId}/profiles`, currentUserId);
                const publicDocRef = doc(db, `artifacts/${appId}/public/data/profiles`, currentUserId);

                // Save to private collection (user-specific)
                await setDoc(privateDocRef, { ...formData, userId: currentUserId }, { merge: true });
                // Save to public collection (for all to see)
                await setDoc(publicDocRef, { ...formData, userId: currentUserId }, { merge: true });

                console.log("Profile saved successfully!");
                displayMyProfile(); // Refresh my profile view
            } catch (err) {
                console.error("Error saving profile:", err);
                displayFormError("Failed to save your profile: " + err.message);
            } finally {
                saveProfileBtn.disabled = false;
                saveProfileBtn.textContent = 'Save Profile';
            }
        });

        // Handle profile deletion
        deleteMyProfileBtn.addEventListener('click', () => {
            confirmDeleteDialog.classList.remove('hidden');
        });

        confirmDeleteYes.addEventListener('click', async () => {
            confirmDeleteDialog.classList.add('hidden');
            myProfileSection.innerHTML = '<div class="text-center p-8 bg-white rounded-lg shadow-md"><div class="text-xl text-gray-600">Deleting profile...</div></div>'; // Show loading

            try {
                const privateDocRef = doc(db, `artifacts/${appId}/users/${currentUserId}/profiles`, currentUserId);
                const publicDocRef = doc(db, `artifacts/${appId}/public/data/profiles`, currentUserId);

                await deleteDoc(privateDocRef);
                await deleteDoc(publicDocRef);
                console.log("Profile deleted successfully!");
                myProfileData = null; // Clear local data
                displayMyProfile(); // Refresh my profile view
            } catch (err) {
                console.error("Error deleting profile:", err);
                myProfileSection.innerHTML = `<div class="text-center p-8 bg-red-100 text-red-700 rounded-lg shadow-md">Failed to delete your profile: ${err.message}</div>`;
            }
        });

        confirmDeleteNo.addEventListener('click', () => {
            confirmDeleteDialog.classList.add('hidden');
        });

        // Event Listeners for UI Navigation and Actions
        allProfilesBtn.addEventListener('click', fetchAllProfiles);
        myProfileBtn.addEventListener('click', displayMyProfile);
        createProfileBtn.addEventListener('click', showProfileForm);
        editMyProfileBtn.addEventListener('click', showProfileForm);
        cancelFormBtn.addEventListener('click', displayMyProfile); // Go back to my profile view

        // Initialize Firebase and Auth
        window.onload = function () {
            showSection('loading'); // Show loading message initially
            try {
                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);

                // Authenticate user
                if (initialAuthToken) {
                    signInWithCustomToken(auth, initialAuthToken)
                        .then(() => console.log("Signed in with custom token"))
                        .catch(error => console.error("Error signing in with custom token:", error));
                } else {
                    signInAnonymously(auth)
                        .then(() => console.log("Signed in anonymously"))
                        .catch(error => console.error("Error signing in anonymously:", error));
                }

                // Listen for authentication state changes
                onAuthStateChanged(auth, (user) => {
                    if (user) {
                        currentUserId = user.uid;
                        console.log("User authenticated:", currentUserId);
                        // Once authenticated, default to showing all profiles
                        fetchAllProfiles();
                    } else {
                        currentUserId = null;
                        console.log("No user authenticated. Signing in anonymously...");
                        // If for some reason auth fails or is not ready, display all profiles
                        fetchAllProfiles();
                    }
                });
            } catch (error) {
                console.error("Failed to initialize Firebase:", error);
                loadingMessage.innerHTML = `<div class="text-xl text-red-700">Error initializing Firebase: ${error.message}</div>`;
            }
        };
    </script>
</body>
</html>
